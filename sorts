QUICK SORT: time -> O(nlogn)

1. If n < = 1, then return.

 
2. Pick any element V in a[]. This is called the pivot.
 
3. Rearrange elements of the array by moving all elements xi > V right of V and all elements x­i < = V left of V. If the place of the V after re-arrangement is j, all elements with value less than V, appear in a[0], a[1] . . . . a[j – 1] and all those with value greater than V appear in a[j + 1] . . . . a[n – 1].
 
4. Apply quick sort recursively to a[0] . . . . a[j – 1] and to a[j + 1] . . . . a[n – 1].



BUCKET SORT:

In bucket sort algorithm the array elements are distributed into a number of buckets. Then each bucket sorted individually either using any other sorting algorithm or by recursively applying bucket sort.



MERGE SORT: time -> O(nlogn); space -> O(n)

Merge sort runs in O (n log n) running time. It is very efficient sorting algorithm with near optimal number of comparison. Recursive algorithm used for merge sort comes under the category of divide and conquer technique. An array of n elements is split around its center producing two smaller arrays. After these two arrays are sorted independently, they can be merged to produce the final sorted array. The process of splitting and merging can be carried recursively till there is only one element in the array. An array with 1 element is always sorted. First divide the list into the smallest unit (1 element), then compare each element with the adjacent list to sort and merge the two adjacent lists. Finally all the elements are sorted and merged.


COUNTING SORT: time/space -> O(n + k) n = numer of elemnts; k = max number

Counting Sort is very basic to implment, the sole purpose of the algorithm is to sort integers of a given list and will outperform general purpose sorting algorithms. For example, given the array {1, 3, 5, 2, 4, 1}, applying the Counting Sort algorithm to the array should give you: {1, 1, 2, 3, 4, 5}. The algorithm works by using the following steps:

  1_ Initializing a counting array to all zeros, the size of the array being equal to the maximum integer in the list.

  2_ Iterate through the input array (the array you wish to sort) adding to the count of the corresponding counting array index. That is to say, if you were iterating over the integer 5 in the input array, you would add to the count of index 5 in the counting array.

  3_ Transfer the count of each index in the counting array back to the input array (overriding previous values), there by making the input array the output array (and saving space).




RADIX SORT: time/space -> O(n) n = numer of elements


1_ Receive an unsorted array of integers, often referred/represent a key

2_ Iterate from most to least or least to most significant digits

3_ Each iteration sort all of the values of the current significant digit the array

